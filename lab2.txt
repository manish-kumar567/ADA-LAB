#include <stdio.h>
#include <stdlib.h>
#include <time.h>
// Merge function using the provided logic
void merge(int a[], int low, int mid, int high) {
 int i = low, j = mid + 1, k = low;
 int c[25000]; // Large enough temporary array
 // Merge elements into array c[]
 while (i <= mid && j <= high) {
 if (a[i] < a[j]) {
 c[k] = a[i];
 i++;
 } else {
 c[k] = a[j];
 j++;
 }
 k++;
 }
 // Copy remaining elements from the left half
 while (i <= mid) {
 c[k++] = a[i++];
 }
 // Copy remaining elements from the right half
 while (j <= high) {
 c[k++] = a[j++];
 }
 // Copy merged elements back to original array
 for (i = low; i <= high; i++) {
 a[i] = c[i];
 }
}
// Merge Sort function
void mergeSort(int a[], int low, int high) {
 if (low < high) {
 int mid = low + (high - low) / 2;
mergeSort(a, low, mid);
 mergeSort(a, mid + 1, high);
 merge(a, low, mid, high);
 }
}
int main() {
 int n;
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 // Generate n random numbers
 int arr[n];
 srand(time(NULL));
 for (int i = 0; i < n; ++i) {
 arr[i] = rand() % 10000; // Generate random numbers between 0 and 9999
 }
 // Measure the time taken for sorting
 clock_t start = clock();
 mergeSort(arr, 0, n - 1);
 clock_t end = clock();
 double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
 printf("Time taken for sorting: %f seconds\n", time_taken);
 /*for (int i = 0; i < n; ++i) {
 printf("%d\t",arr[i]);// Generate random numbers between 0 and 9999
 }*/
 return 0;
}