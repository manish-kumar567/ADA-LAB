=#include <stdio.h>
#include <stdlib.h>
#include <time.h>
// Function to swap two elements
void swap(int *a, int *b) {
 int temp = *a;
 *a = *b;
 *b = temp;
}
// Partition function using the first element as the pivot
int partition(int arr[], int low, int high) {
 int pivot = arr[low]; // First element as pivot
 int i = low + 1;
 int j = high;
 while (i <= j) {
 while (i <= high && arr[i] <= pivot)
 i++;
 while (arr[j] > pivot)
 j--;
 if (i < j)
 swap(&arr[i], &arr[j]);
 }
 swap(&arr[low], &arr[j]); // Place pivot at its correct position
 return j;
}
// Quick Sort function
void quickSort(int arr[], int low, int high) {
 if (low < high) {
 int pivotIndex = partition(arr, low, high);
 quickSort(arr, low, pivotIndex - 1);
 quickSort(arr, pivotIndex + 1, high);
 }
}
int main() {
int n;
 printf("Enter the number of elements: ");
 scanf("%d", &n);
 // Generate n random numbers
 int arr[n];
 srand(time(NULL));
 for (int i = 0; i < n; ++i) {
 arr[i] = rand() % 10000; // Generate random numbers between 0 and 9999
 }
 // Measure the time taken for sorting
 clock_t start = clock();
 quickSort(arr, 0, n - 1);
 clock_t end = clock();
 double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
 /*for (int i = 0; i < n; ++i) {
 printf("%d\t",arr[i]);
 }*/
 printf("Time taken for sorting: %f seconds\n", time_taken);
 return 0;
}